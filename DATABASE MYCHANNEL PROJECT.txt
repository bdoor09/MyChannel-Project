
--TABLE ROLE-----------------------------------------------
CREATE TABLE ROLE(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
ROLENAME VARCHAR2(100 CHAR)
);

--TABLE USER-----------------------------------------------
CREATE TABLE USERS(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
FIRSTNAME VARCHAR2(100 CHAR),
LASTNAME VARCHAR2(100 CHAR),
AGE INT,
EMAILE VARCHAR2(150 CHAR),
CITY VARCHAR2(100 CHAR),
COUNTRY VARCHAR2(100 CHAR),
DATEOFBIRTH DATE,
REGISTERDATE DATE
);

--TABLE LOGIN-----------------------------------------------
CREATE TABLE LOGIN(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
USERNAME VARCHAR2(150 CHAR),
PASSWORD VARCHAR2(200 CHAR),
ROLEID INT,
USERID INT,
CONSTRAINT FKROLEID FOREIGN KEY(ROLEID) REFERENCES ROLE(ID) ON DELETE CASCADE,
CONSTRAINT FKUSERID FOREIGN KEY(USERID) REFERENCES USERS(ID) ON DELETE CASCADE
);

--TABLE FEEDBACK-----------------------------------------------
CREATE TABLE FEEDBACK(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
CONTENT VARCHAR2(400 CHAR),
DTAEOFSEND DATE,
USERID INT,
CONSTRAINT FKFED FOREIGN KEY(USERID) REFERENCES USERS(ID) ON DELETE CASCADE
);

--TABLE CHANNEL-----------------------------------------------
CREATE TABLE CHANNEL(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
CHANNELNAME VARCHAR2(200 CHAR),
DISCRIPTI VARCHAR2(800 CHAR),
IMAGENAME  VARCHAR2(200 CHAR),
USERID INT,
CONSTRAINT FKCHANNEL FOREIGN KEY(USERID) REFERENCES USERS(ID) ON DELETE CASCADE,
BACKIMAGE VARCHAR2(1500 CHAR)
);


--TABLE REPORT-----------------------------------------------
CREATE TABLE REPORT(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
CONTENT VARCHAR2(400 CHAR),
DTAEOFSEND DATE,
CHANNELID INT,
CONSTRAINT FKCHA FOREIGN KEY(CHANNELID) REFERENCES CHANNEL(ID) ON DELETE CASCADE,
STATUS VARCHAR2(200 CHAR)
);

--TABLE NOTIFICATION----------------------------------------------- 
CREATE TABLE NOTIFICATION(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
MESSAGE VARCHAR2(400 CHAR), 
DTAEOFSEND DATE,
REPORTID INT,
CONSTRAINT FKREP FOREIGN KEY(REPORTID) REFERENCES CHANNEL(ID) ON DELETE CASCADE,
STATUS VARCHAR2(200 CHAR)
);

--TABLE VIDEO----------------------------------------------- 
CREATE TABLE VIDEOS(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
VIDEOTITLE VARCHAR2(500 CHAR),
VIDEOURL VARCHAR2(800 CHAR),
SIZEOFVIDEO FLOAT,
DESCRIPTION VARCHAR2(800 CHAR),
CHANNELID INT,
INFOID INT,
CONSTRAINT FKCHAE FOREIGN KEY(CHANNELID) REFERENCES CHANNEL(ID) ON DELETE CASCADE,
CONSTRAINT FKINFO FOREIGN KEY(INFOID) REFERENCES INFORMATION(ID) ON DELETE CASCADE
);

--TABLE COMMENT----------------------------------------------- 
CREATE TABLE COMMENTS(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
CONTENT VARCHAR2(1000 CHAR),
COMMENTDATE DATE,
VIDEOID INT,
CONSTRAINT FKVID FOREIGN KEY(VIDEOID) REFERENCES VIDEOS(ID) ON DELETE CASCADE
);


--TABLE RESPONS-----------------------------------------------
CREATE TABLE RESPONS(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
REPLAYCOMMENT VARCHAR2(1000 CHAR),
COMMENTID INT,
CONSTRAINT FKCOM FOREIGN KEY(COMMENTID) REFERENCES COMMENTS(ID) ON DELETE CASCADE
);



--TABLE PAYMENT-----------------------------------------------
CREATE TABLE PAYMENT(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
CARDHOLDERNAME VARCHAR2(200 CHAR),
CARDNUMBER INT,
CVV INT,
EXPIRYDATE DATE,
PAYMENTDATE DATE,
TOTALAMOUNT FLOAT,
USERID INT,
CONSTRAINT FKUSERPAY FOREIGN KEY(USERID) REFERENCES USERS(ID) ON DELETE CASCADE
);

--TABLE FOOTER-----------------------------------------------
CREATE TABLE FOOTER(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
X VARCHAR2(200 CHAR),
Facebook VARCHAR2(200 CHAR),
Instagram VARCHAR2(200 CHAR),
Whatsapp VARCHAR2(200 CHAR),
Gmail VARCHAR2(200 CHAR),
Contents VARCHAR2(200 CHAR)
);

--TABLE HOME----------------------------------------------- 
CREATE TABLE HOME(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
Title VARCHAR2(200 CHAR),
Contents VARCHAR2(400 CHAR),
ImageName VARCHAR2(400 CHAR),
FooterId INT,
CONSTRAINT FkHome FOREIGN KEY(FooterId) REFERENCES FOOTER(ID) ON DELETE CASCADE
);

--TABLE ABOUT----------------------------------------------- 
CREATE TABLE ABOUT(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
Title VARCHAR2(200 CHAR),
Contents VARCHAR2(400 CHAR),
ImageName VARCHAR2(400 CHAR),
HomeId INT,
CONSTRAINT FkAbout FOREIGN KEY(HomeId) REFERENCES HOME(ID) ON DELETE CASCADE
);
 
 --TABLE TEAMMEMBERS-----------------------------------------------
CREATE TABLE TEAMMEMBERS(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
MemberName VARCHAR2(200 CHAR),
Role VARCHAR2(400 CHAR),
ImageName VARCHAR2(400 CHAR),
Email VARCHAR2(200 CHAR),
HomeId INT,
CONSTRAINT FkTeam FOREIGN KEY(HomeId) REFERENCES HOME(ID) ON DELETE CASCADE
);
 
--TABLE CONTACT----------------------------------------------- 
CREATE TABLE CONTACT(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
Title VARCHAR2(200 CHAR),
Address VARCHAR2(400 CHAR),
PhoneNumber VARCHAR2(400 CHAR),
Email VARCHAR2(200 CHAR),
HomeId INT,
CONSTRAINT FkContact FOREIGN KEY(HomeId) REFERENCES HOME(ID) ON DELETE CASCADE
);

--TABLE CHANNELSUB----------------------------------------------- 
CREATE TABLE CHANNELSUB(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
ChannelId int ,
ChannelName VARCHAR2(800 CHAR),
Description VARCHAR2(800 CHAR),
ImageName VARCHAR2(800 CHAR),
USERID INT,
SUBUSERID INT,
CONSTRAINT FKUSERCH FOREIGN KEY(USERID) REFERENCES USERS(ID) ON DELETE CASCADE
);

--TABLE Features----------------------------------------------- 
CREATE TABLE Features(
ID INT  GENERATED bY DEFAULT AS IDENTITY PRIMARY KEY,
Title VARCHAR2(400 CHAR),
con1 VARCHAR2(400 CHAR),
con2 VARCHAR2(400 CHAR),
con3 VARCHAR2(400 CHAR),
imagename VARCHAR2(1500 CHAR),
HomeId INT,
CONSTRAINT Fkfeature FOREIGN KEY(HomeId) REFERENCES HOME(ID) ON DELETE CASCADE
);


----------------------------PACKAGES-------------------------------

-------------------------------------------------------------------
------------------------PACKAGES ROLE------------------------------
-------------------------------------------------------------------
SET SERVEROUTPUT ON;

CREATE OR REPLACE PACKAGE ROLE_PACKAGE AS
PROCEDURE GetAllRole;
PROCEDURE CreateRole(role_name in ROLE.ROLENAME%TYPE);
PROCEDURE UpdateRole(RID in ROLE.ID%TYPE,role_name in ROLE.ROLENAME%TYPE);
PROCEDURE DeleteRole(RID in ROLE.ID%TYPE);
PROCEDURE GetRoleByID(RID in ROLE.ID%TYPE);
procedure getusernamerolename; 
END ROLE_PACKAGE;

----------------------BODY------------------------------------------
CREATE OR REPLACE PACKAGE BODY ROLE_PACKAGE 
AS

    PROCEDURE GetAllRole
    AS
    GetallRole SYS_REFCURSOR;
    BEGIN
    OPEN GetallRole FOR  SELECT * FROM ROLE;
    DBMS_SQL.RETURN_RESULT(GetallRole);
    END GetAllRole;
    
    
--------------------------------------------------------------------------------
    PROCEDURE CreateRole(role_name in ROLE.ROLENAME%TYPE)
    AS
    BEGIN
    INSERT INTO ROLE VALUES(DEFAULT,role_name);
    END CreateRole;
--------------------------------------------------------------------------------
    PROCEDURE UpdateRole(RID in ROLE.ID%TYPE,role_name in ROLE.ROLENAME%TYPE)
    AS
    BEGIN
    UPDATE ROLE
    SET ROLENAME=role_name
    WHERE RID=ID;
    COMMIT; 
    END UpdateRole;
--------------------------------------------------------------------------------
    PROCEDURE DeleteRole(RID in ROLE.ID%TYPE)
    AS
    BEGIN
    DELETE FROM ROLE
    WHERE RID=ID;
    COMMIT;
    END DeleteRole;
--------------------------------------------------------------------------------
    PROCEDURE GetRoleByID(RID in ROLE.ID%TYPE)
    AS
    
    GetRole SYS_REFCURSOR;
    BEGIN
    OPEN GetRole FOR SELECT * FROM ROLE
    WHERE RID=ID;
    DBMS_SQL.RETURN_RESULT(GetRole);
    END GetRoleByID; 
--------------------------------------------------------------------------------
    procedure getusernamerolename 
    as
    c_user sys_refcursor ; 
    begin  
    open c_user for 
    select LOGIN.USERNAME, ROLE.ROLENAME 
    from LOGIN 
    inner join ROLE 
    on LOGIN.ROLEID = ROLE.ID ; 
    Dbms_sql.return_result(c_user);
     
    end getusernamerolename;   
END ROLE_PACKAGE ;

-------------------------------------------------------------------
------------------------PACKAGES FEEDBACK--------------------------
-------------------------------------------------------------------


CREATE OR REPLACE PACKAGE FEEDBACK_PACKAGE AS
PROCEDURE GetAllFeedback;
PROCEDURE CreateFeedback(con IN FEEDBACK.CONTENT%TYPE,date_send IN FEEDBACK.DTAEOFSEND%TYPE,user_id IN FEEDBACK.USERID%TYPE);
PROCEDURE UpdateFeedback(FID in FEEDBACK.ID%TYPE,con IN FEEDBACK.CONTENT%TYPE,date_send IN FEEDBACK.DTAEOFSEND%TYPE,user_id IN FEEDBACK.USERID%TYPE);
PROCEDURE DeleteFeedback(FID in FEEDBACK.ID%TYPE);
PROCEDURE GetFeedbackByID(FID in FEEDBACK.ID%TYPE);
PROCEDURE GetFeedbachuser;
PROCEDURE GetTop4FeedbackUser;


END FEEDBACK_PACKAGE;

--------------------------------BODY-------------------------------

CREATE OR REPLACE PACKAGE BODY FEEDBACK_PACKAGE 
AS
    PROCEDURE GetAllFeedback
    AS
    GetallFeed SYS_REFCURSOR;
    BEGIN
    OPEN GetallFeed FOR  SELECT * FROM FEEDBACK;
    DBMS_SQL.RETURN_RESULT(GetallFeed);
    END GetAllFeedback;
--------------------------------------------------------------------------------
    PROCEDURE CreateFeedback(con IN FEEDBACK.CONTENT%TYPE,date_send IN FEEDBACK.DTAEOFSEND%TYPE,user_id IN FEEDBACK.USERID%TYPE)
    AS
    BEGIN
    INSERT INTO FEEDBACK VALUES(DEFAULT,con,date_send,user_id);
    END CreateFeedback;
--------------------------------------------------------------------------------
    PROCEDURE UpdateFeedback(FID in FEEDBACK.ID%TYPE,con IN FEEDBACK.CONTENT%TYPE,date_send IN FEEDBACK.DTAEOFSEND%TYPE,user_id IN FEEDBACK.USERID%TYPE)
    AS
    BEGIN
    UPDATE FEEDBACK
    SET CONTENT=con,DTAEOFSEND=date_send,USERID=user_id
    WHERE FID=ID;
    COMMIT; 
    END UpdateFeedback;
--------------------------------------------------------------------------------
    PROCEDURE DeleteFeedback(FID in FEEDBACK.ID%TYPE)
    AS
    BEGIN
    DELETE FROM FEEDBACK
    WHERE FID=ID;
    COMMIT;
    END DeleteFeedback;
--------------------------------------------------------------------------------
    PROCEDURE GetFeedbackByID(FID in FEEDBACK.ID%TYPE)
    AS
    GetFeed SYS_REFCURSOR;
    BEGIN
    OPEN GetFeed FOR SELECT * FROM FEEDBACK
    WHERE FID=ID;
    DBMS_SQL.RETURN_RESULT(GetFeed);
    END GetFeedbackByID; 
--------------------------------------------------------------------------------
PROCEDURE GetFeedbachuser
AS 
fe SYS_REFCURSOR;
BEGIN
OPEN fe FOR SELECT FEEDBACK.CONTENT,FEEDBACK.DTAEOFSEND,FEEDBACK.USERID,FEEDBACK.ID,USERS.FIRSTNAME,USERS.LASTNAME,USERS.IMAGE
FROM FEEDBACK
INNER JOIN USERS
ON FEEDBACK.USERID=USERS.ID;
DBMS_SQL.RETURN_RESULT(fe);
END GetFeedbachuser;

--------------------------------------------------------------------------------

PROCEDURE GetTop4FeedbackUser
AS

  fe SYS_REFCURSOR;

BEGIN
OPEN fe FOR
SELECT f.*, u.FIRSTNAME, u.LASTNAME, u.IMAGE
    FROM (
      SELECT f.*, ROW_NUMBER() OVER (ORDER BY f.DTAEOFSEND DESC) AS rn
      FROM FEEDBACK f
      ORDER BY f.DTAEOFSEND DESC
    ) f
    INNER JOIN USERS u ON f.USERID = u.ID
    WHERE f.rn <= 4;
  DBMS_SQL.RETURN_RESULT(fe);
END GetTop4FeedbackUser;

END FEEDBACK_PACKAGE;

-------------------------------------------------------------------
------------------------PACKAGES LOGIN-----------------------------
-------------------------------------------------------------------

CREATE OR REPLACE PACKAGE LOGIN_PACKAGE AS  
PROCEDURE User_Login(UserName IN VARCHAR, PASS IN VARCHAR);
PROCEDURE Register(p_firstname VARCHAR2,p_lastname VARCHAR2,p_age INT,p_email VARCHAR2,p_city VARCHAR2,p_country VARCHAR2,p_dateofbirth DATE,p_registerdate DATE,p_username VARCHAR2,p_password VARCHAR2,p_phonenumber VARCHAR2,p_image VARCHAR2);
PROCEDURE GetByUserName(p_usename in varchar2);
 
END LOGIN_PACKAGE;
 
----------------------body------------------------------
 
CREATE OR REPLACE PACKAGE BODY LOGIN_PACKAGE
AS  
PROCEDURE User_Login(UserName IN VARCHAR, PASS IN VARCHAR) AS    
c_all SYS_REFCURSOR;
BEGIN    
OPEN c_all FOR SELECT USERNAME, ROLEID FROM LOGIN 
WHERE USERNAME = UserName AND PASSWORD = PASS;
DBMS_SQL.RETURN_RESULT(c_all);
END User_Login;
----------------------------------------------------U------------------
PROCEDURE Register(p_firstname VARCHAR2,p_lastname VARCHAR2,p_age INT,p_email VARCHAR2,p_city VARCHAR2,p_country VARCHAR2,p_dateofbirth DATE,p_registerdate DATE,p_username VARCHAR2,p_password VARCHAR2,p_phonenumber VARCHAR2,p_image VARCHAR2)
AS
  v_user_id INT;
    BEGIN
        -- Insert into USERS table
        INSERT INTO USERS (FIRSTNAME, LASTNAME, AGE, EMAILE, CITY, COUNTRY, DATEOFBIRTH, REGISTERDATE,PHONENUMBER,IMAGE)
        VALUES (p_firstname, p_lastname, p_age, p_email, p_city, p_country, p_dateofbirth, p_registerdate,p_phonenumber,p_image)
        RETURNING ID INTO v_user_id;
        -- Insert into LOGIN table with ROLEID as 2
        INSERT INTO LOGIN (USERNAME, PASSWORD, ROLEID, USERID)
        VALUES(p_username, p_password, 1, v_user_id);

        COMMIT;
    END Register;
    
---------------------------------------------------------------------------------
 PROCEDURE GetByUserName(p_usename in varchar2)
 AS
 User_co SYS_REFCURSOR;
 BEGIN
 OPEN  User_co FOR SELECT * FROM LOGIN
 WHERE USERNAME=p_usename;
 DBMS_SQL.RETURN_RESULT(User_co);
 END GetByUserName;
END LOGIN_PACKAGE;
--ALTER TABLE TEAMMEMBERS
--MODIFY  PHONENUMBER varchar2( 20 char);


------------------------------------------------------------------------
------------------------PACKAGES VIDEO----------------------------------
------------------------------------------------------------------------

-- Create the new video package
CREATE OR REPLACE PACKAGE Video_Package AS
    PROCEDURE GetAll_Videos;
    PROCEDURE GetVideoById(vid IN VIDEOS.ID%TYPE);
    PROCEDURE CreateVideo(VIDEO_TITLE IN VIDEOS.VIDEOTITLE%TYPE,VIDEO_URL IN VIDEOS.VIDEOURL%TYPE,SIZE_OF_VIDEO IN VIDEOS.SIZEOFVIDEO%TYPE,des IN VIDEOS.DESCRIPTION%TYPE,CHANNEL_ID IN VIDEOS.CHANNELID%TYPE,NO_LIKE IN VIDEOS.NUMBEROFLIKE%TYPE,NO_DISLIKE IN VIDEOS.NUMBEROFDISLIKE%TYPE,NO_DISPLAY IN VIDEOS.NUMBEROFDISPLAY%TYPE,LOAD_DATE IN VIDEOS.UPLOADEDATE%TYPE,image IN VIDEOS.IMAGEURL%TYPE);
    PROCEDURE UpdateVideo(vid IN VIDEOS.ID%TYPE,VIDEO_TITLE IN VIDEOS.VIDEOTITLE%TYPE,des IN VIDEOS.DESCRIPTION%TYPE,CHANNEL_ID IN VIDEOS.CHANNELID%TYPE,VIDEO_URL IN VIDEOS.VIDEOURL%TYPE,image IN VIDEOS.IMAGEURL%TYPE);
    PROCEDURE DeleteVideo(vid IN VIDEOS.ID%TYPE);
    PROCEDURE VideosOnEachChannel;
    PROCEDURE TotalVideos;
    PROCEDURE update_like_inc(vid IN INT);
    PROCEDURE update_dislike_inc(vid IN INT); 
    PROCEDURE update_like_dic(vid IN INT);
    PROCEDURE update_dislike_dic(vid IN INT);
    PROCEDURE GetVideoBychannelId(cid IN VIDEOS.CHANNELID%TYPE);
    PROCEDURE getvideouser(uid in int );

END Video_Package;

-----------------------BODY----------------------------------------------
CREATE OR REPLACE PACKAGE BODY Video_Package AS
    PROCEDURE GetAll_Videos AS
        cur_all SYS_REFCURSOR;
    BEGIN 
        OPEN cur_all FOR
        SELECT * FROM VIDEOS;
        DBMS_SQL.RETURN_RESULT(cur_all);
    END GetAll_Videos;
------------------------------------------------------------------------ 
    PROCEDURE GetVideoById(vid IN VIDEOS.ID%TYPE) AS
        cur_item SYS_REFCURSOR;
    BEGIN
        OPEN cur_item FOR
        SELECT * FROM VIDEOS
        WHERE ID = vid;
        DBMS_SQL.RETURN_RESULT(cur_item);
    END GetVideoById;
------------------------------------------------------------------------------------- 
    PROCEDURE CreateVideo(VIDEO_TITLE IN VIDEOS.VIDEOTITLE%TYPE,VIDEO_URL IN VIDEOS.VIDEOURL%TYPE,SIZE_OF_VIDEO IN VIDEOS.SIZEOFVIDEO%TYPE,des IN VIDEOS.DESCRIPTION%TYPE,CHANNEL_ID IN VIDEOS.CHANNELID%TYPE,NO_LIKE IN VIDEOS.NUMBEROFLIKE%TYPE,NO_DISLIKE IN VIDEOS.NUMBEROFDISLIKE%TYPE,NO_DISPLAY IN VIDEOS.NUMBEROFDISPLAY%TYPE,LOAD_DATE IN VIDEOS.UPLOADEDATE%TYPE,image IN VIDEOS.IMAGEURL%TYPE)
    AS
    BEGIN 
        INSERT INTO VIDEOS VALUES (DEFAULT, VIDEO_TITLE,VIDEO_URL, SIZE_OF_VIDEO, des,CHANNEL_ID,1,1,NO_DISPLAY,LOAD_DATE,image);
        COMMIT;
    END CreateVideo;
-----------------------------------------------------------------------------------------
PROCEDURE UpdateVideo(vid IN VIDEOS.ID%TYPE,VIDEO_TITLE IN VIDEOS.VIDEOTITLE%TYPE,des IN VIDEOS.DESCRIPTION%TYPE,CHANNEL_ID IN VIDEOS.CHANNELID%TYPE,VIDEO_URL IN VIDEOS.VIDEOURL%TYPE,image IN VIDEOS.IMAGEURL%TYPE)
    AS
    BEGIN
        UPDATE VIDEOS  
        SET VIDEOTITLE = VIDEO_TITLE,  
            VIDEOURL = VIDEO_URL,
            DESCRIPTION = des, 
            CHANNELID = CHANNEL_ID,
            IMAGEURL=image
        WHERE ID = vid;
        COMMIT;
    END UpdateVideo;
------------------------------------------------------------------------------------ 
    PROCEDURE DeleteVideo(vid IN VIDEOS.ID%TYPE) AS
    BEGIN
        DELETE FROM VIDEOS
        WHERE ID = vid;
        COMMIT;
    END DeleteVideo;
---------------------------------------------------------------------------------------
PROCEDURE VideosOnEachChannel AS
     v_videos_cursor SYS_REFCURSOR;
   BEGIN
     OPEN v_videos_cursor FOR
         SELECT c.id AS channelid, c.channelname, COUNT(v.id) AS VideoCount
         FROM CHANNEL c
         LEFT JOIN VIDEOS v ON c.id = v.channelid
         GROUP BY c.id, c.channelname;
     DBMS_SQL.RETURN_RESULT(v_videos_cursor);
   END VideosOnEachChannel;
-----------------------------------------------------------------------------------
PROCEDURE TotalVideos AS
  V_all SYS_REFCURSOR;
  result INT;
BEGIN
  OPEN V_all FOR
    SELECT COUNT(*) INTO result FROM VIDEOS;
  DBMS_SQL.RETURN_RESULT(V_all);
END TotalVideos;
 
-----------------------------------
PROCEDURE update_like_inc(vid IN INT) IS
BEGIN
    UPDATE videos
    SET NUMBEROFLIKE = NUMBEROFLIKE + 1
    WHERE ID = vid;

 
--    DBMS_OUTPUT.PUT_LINE('NUMBEROFLIKE successfully.');
END update_like_inc;
 
----------------------------------------
PROCEDURE update_dislike_inc(vid IN INT) IS
BEGIN
    UPDATE videos
    SET NUMBEROFDISLIKE = NUMBEROFDISLIKE + 1
    WHERE ID = vid;  
--    DBMS_OUTPUT.PUT_LINE('NUMBEROFDISLIKE successfully.');
END update_dislike_inc;
------------------------------------------------
PROCEDURE update_like_dic(vid IN INT) IS
BEGIN
    UPDATE videos
    SET NUMBEROFLIKE = NUMBEROFLIKE - 1
    WHERE ID = vid;
--    DBMS_OUTPUT.PUT_LINE('NUMBEROFLIKE successfully.');
END update_like_dic;
 
----------------------------------------
PROCEDURE update_dislike_dic(vid IN INT) IS
BEGIN
    UPDATE videos
    SET NUMBEROFDISLIKE = NUMBEROFDISLIKE - 1
    WHERE ID = vid;
--    DBMS_OUTPUT.PUT_LINE('NUMBEROFDISLIKE successfully.');
END update_dislike_dic;
----------------------------------------------------------------------------------
PROCEDURE GetVideoBychannelId(cid IN VIDEOS.CHANNELID%TYPE) AS
        cur_item SYS_REFCURSOR;
    BEGIN
        OPEN cur_item FOR
        SELECT * FROM VIDEOS
        WHERE CHANNELID = cid;
        DBMS_SQL.RETURN_RESULT(cur_item);
    END GetVideoBychannelId;
    -------------------------------------------------------------------------
PROCEDURE getvideouser(uid in int )
as
us_all SYS_REFCURSOR;
BEGIN
OPEN us_all for 
SELECT v.*,v.id, c.CHANNELNAME, c.IMAGENAME ,c.DESCRIPTION
        FROM VIDEOS v
        INNER JOIN CHANNEL c ON v.CHANNELID = c.ID
        inner join Users u ON C.USERID = u.ID
        WHERE u.ID = uid;
                DBMS_SQL.RETURN_RESULT(us_all);
end getvideouser;
END Video_Package;



------------------------------------------------------------------------
------------------------PACKAGES RESPONS--------------------------------
------------------------------------------------------------------------

-- Create the new RESPONS package
CREATE OR REPLACE PACKAGE Respons_Package AS
PROCEDURE GetAllResponses;
PROCEDURE GetResponseById(rid IN RESPONS.ID%TYPE);
PROCEDURE CreateResponse(REPLAY_COMMENT IN RESPONS.REPLAYCOMMENT%TYPE, COMMENT_ID IN RESPONS.COMMENTID%TYPE, User_ID IN RESPONS.USERCID%TYPE);
PROCEDURE UpdateResponse(rid IN RESPONS.ID%TYPE, REPLAY_COMMENT IN RESPONS.REPLAYCOMMENT%TYPE, COMMENT_ID IN RESPONS.COMMENTID%TYPE, User_ID IN RESPONS.USERCID%TYPE);
PROCEDURE DeleteResponse(rid IN RESPONS.ID%TYPE);
PROCEDURE GetResponsByCommentid(cid IN COMMENTS.ID%TYPE);
END Respons_Package;
 
 -----------------------------BODY-------------------------------------------
-- Create the new RESPONS package body
CREATE OR REPLACE PACKAGE BODY Respons_Package AS
    PROCEDURE GetAllResponses AS
        cur_all SYS_REFCURSOR;
    BEGIN 
        OPEN cur_all FOR
        SELECT * FROM RESPONS;
        DBMS_SQL.RETURN_RESULT(cur_all);
    END GetAllResponses;
    
---------------------------------------------------
    PROCEDURE GetResponseById(rid IN RESPONS.ID%TYPE) AS
        cur_item SYS_REFCURSOR;
    BEGIN
        OPEN cur_item FOR
        SELECT * FROM RESPONS
        WHERE ID = rid;
        DBMS_SQL.RETURN_RESULT(cur_item);
    END GetResponseById;
--------------------------------------------------------
    PROCEDURE CreateResponse(
        REPLAY_COMMENT IN RESPONS.REPLAYCOMMENT%TYPE,
        COMMENT_ID IN RESPONS.COMMENTID%TYPE,
        User_ID IN RESPONS.USERCID%TYPE
    ) 
    AS
    BEGIN 
        INSERT INTO RESPONS VALUES (DEFAULT, REPLAY_COMMENT, COMMENT_ID, User_ID);
        COMMIT;
    END CreateResponse;
----------------------------------------------------------
    PROCEDURE UpdateResponse(
        rid IN RESPONS.ID%TYPE,
        REPLAY_COMMENT IN RESPONS.REPLAYCOMMENT%TYPE,
        COMMENT_ID IN RESPONS.COMMENTID%TYPE,
        User_ID IN RESPONS.USERCID%TYPE
    ) 
    AS
    BEGIN
        UPDATE RESPONS  
        SET REPLAYCOMMENT = REPLAY_COMMENT, 
            COMMENTID = COMMENT_ID,
            USERCID = User_ID
        WHERE ID = rid;
        COMMIT;
    END UpdateResponse;
--------------------------------------------------------
    PROCEDURE DeleteResponse(rid IN RESPONS.ID%TYPE) AS
    BEGIN
        DELETE FROM RESPONS
        WHERE ID = rid;
        COMMIT;
    END DeleteResponse;
    ---------------------------------------------------------
PROCEDURE GetResponsByCommentid(cid IN COMMENTS.ID%TYPE) AS
        cur_respons SYS_REFCURSOR;
    BEGIN
        OPEN cur_respons FOR
            SELECT R.REPLAYCOMMENT, R.ID , U.FIRSTNAME, U.LASTNAME, U.IMAGE, C.ID as COMMENTID
            FROM RESPONS R
            INNER JOIN COMMENTS C ON C.ID = R.COMMENTID
            INNER JOIN USERS U ON R.USERCID = U.ID 
            WHERE R.COMMENTID = cid;
        DBMS_SQL.RETURN_RESULT(cur_respons);
    END GetResponsByCommentid; 
 
END Respons_Package;
------------------------------------------------------------------------
------------------------PACKAGES COMMENT--------------------------------
------------------------------------------------------------------------
-- Create the new comments package
CREATE OR REPLACE PACKAGE Comment_Package AS
    PROCEDURE GetAllComments;
    PROCEDURE GetCommentById(cid IN COMMENTS.ID%TYPE);
    PROCEDURE CreateComment(CONT IN COMMENTS.CONTENT%TYPE, COMMENT_DATE IN COMMENTS.COMMENTDATE%TYPE, VIDEO_ID IN COMMENTS.VIDEOID%TYPE,User_ID IN COMMENTS.USERID%TYPE);
    PROCEDURE UpdateComment(cid IN COMMENTS.ID%TYPE, CONT IN COMMENTS.CONTENT%TYPE, COMMENT_DATE IN COMMENTS.COMMENTDATE%TYPE, VIDEO_ID IN COMMENTS.VIDEOID%TYPE,User_ID IN COMMENTS.USERID%TYPE);
    PROCEDURE DeleteComment(cid IN COMMENTS.ID%TYPE);
    PROCEDURE GetCommentUserInfo;
    PROCEDURE GetCommentsByVideoId(vidid IN COMMENTS.VIDEOID%TYPE);
    PROCEDURE TotalComment(p_vid IN INT);
END Comment_Package;
 
----------------------------BODY------------------------------
-- Create or replace the package body
CREATE OR REPLACE PACKAGE BODY Comment_Package AS
    PROCEDURE GetAllComments AS
        cur_all SYS_REFCURSOR;
    BEGIN 
        OPEN cur_all FOR
        SELECT * FROM COMMENTS;
        DBMS_SQL.RETURN_RESULT(cur_all);
    END GetAllComments;
----------------------------------------------------------
    PROCEDURE GetCommentById(cid IN COMMENTS.ID%TYPE) AS
        cur_item SYS_REFCURSOR;
    BEGIN
        OPEN cur_item FOR
        SELECT * FROM COMMENTS
        WHERE ID = cid;
        DBMS_SQL.RETURN_RESULT(cur_item);
    END GetCommentById;
---------------------------------------------------------
    PROCEDURE CreateComment(
        CONT IN COMMENTS.CONTENT%TYPE, COMMENT_DATE IN COMMENTS.COMMENTDATE%TYPE, VIDEO_ID IN COMMENTS.VIDEOID%TYPE,User_ID IN COMMENTS.USERID%TYPE
    ) AS
    BEGIN 
        INSERT INTO COMMENTS VALUES (DEFAULT, CONT, COMMENT_DATE, VIDEO_ID,User_ID);
        COMMIT;
    END CreateComment;
----------------------------------------------------------
    PROCEDURE UpdateComment(
       cid IN COMMENTS.ID%TYPE, CONT IN COMMENTS.CONTENT%TYPE, COMMENT_DATE IN COMMENTS.COMMENTDATE%TYPE, VIDEO_ID IN COMMENTS.VIDEOID%TYPE,User_ID IN COMMENTS.USERID%TYPE
    ) AS
    BEGIN
        UPDATE COMMENTS  
        SET CONTENT = CONT, 
            COMMENTDATE = COMMENT_DATE,
            VIDEOID = VIDEO_ID,
            USERID = User_ID
        WHERE ID = cid;
        COMMIT;
    END UpdateComment;
----------------------------------------------------------
    PROCEDURE DeleteComment(cid IN COMMENTS.ID%TYPE) AS
    BEGIN
        DELETE FROM COMMENTS
        WHERE ID = cid;
        COMMIT;
    END DeleteComment;
-----------------------------------------------------------
PROCEDURE GetCommentUserInfo AS
    p_cursor SYS_REFCURSOR;
BEGIN
    OPEN p_cursor FOR
        SELECT
            C.ID AS COMMENT_ID,
            C.CONTENT,
            C.COMMENTDATE,
            U.ID AS USER_ID,
            U.FIRSTNAME,
            U.LASTNAME,
            U.EMAILE
        FROM
            COMMENTS C
            JOIN USERS U ON C.USERID = U.ID;
 
    DBMS_SQL.RETURN_RESULT(p_cursor);
END GetCommentUserInfo;
 
----------------------------------------------------------   
PROCEDURE GetCommentsByVideoId(vidid IN COMMENTS.VIDEOID%TYPE) AS
    cur_comments SYS_REFCURSOR;
BEGIN
    OPEN cur_comments FOR
        SELECT C.CONTENT, C.ID, C.COMMENTDATE, U.FIRSTNAME, U.LASTNAME, U.IMAGE, V.ID as Videoid
        FROM COMMENTS C
        INNER JOIN USERS U ON C.USERID = U.ID 
        INNER JOIN VIDEOS V ON C.VIDEOID = V.ID
        WHERE V.ID = vidid;
 
    DBMS_SQL.RETURN_RESULT(cur_comments);
END GetCommentsByVideoId;
------------------------------------------------------------- 
PROCEDURE TotalComment(p_vid IN INT) 
AS 
  cur_comments SYS_REFCURSOR;
  result INT;
BEGIN
  OPEN cur_comments FOR
    SELECT COUNT(*) INTO result FROM COMMENTS
    WHERE VIDEOID = p_vid;
  DBMS_SQL.RETURN_RESULT(cur_comments);
END TotalComment;
 
END Comment_Package;
------------------------------------------------------------------------
------------------------PACKAGES USER-----------------------------------
------------------------------------------------------------------------
 
CREATE OR REPLACE PACKAGE User_Package AS
PROCEDURE GET_ALL;
PROCEDURE GET_USER_BY_ID(uid IN Users.ID%TYPE);
PROCEDURE CREAT_NEW_USER (First_NAME IN users.FIRSTNAME%TYPE,Last_Name IN users.LASTNAME%TYPE,age IN USERS.AGE%TYPE,email IN USERS.EMAILE%TYPE,city IN USERS.CITY%TYPE,coun IN USERS.COUNTRY%TYPE,BIRTHDAY_DATE IN USERS.DATEOFBIRTH%TYPE ,REGISTER_DATE IN USERS.REGISTERDATE%TYPE,PHONE_NUMBER IN USERS.PHONENUMBER%TYPE,IMA IN USERS.IMAGE%TYPE);
PROCEDURE UPDATE_USER (uid IN Users.ID%TYPE,First_NAME IN users.FIRSTNAME%TYPE,Last_Name IN users.LASTNAME%TYPE,age IN USERS.AGE%TYPE,email IN USERS.EMAILE%TYPE,city IN USERS.CITY%TYPE,coun IN USERS.COUNTRY%TYPE,BIRTHDAY_DATE IN USERS.DATEOFBIRTH%TYPE ,REGISTER_DATE IN USERS.REGISTERDATE%TYPE,PHONE_NUMBER IN USERS.PHONENUMBER%TYPE,IMA IN USERS.IMAGE%TYPE);
PROCEDURE DELETE_USER (uid IN USERS.ID%TYPE);
PROCEDURE TotalRegisteredUsers;
PROCEDURE GetUserProfile(user_id IN INT);
PROCEDURE update_user_profile( p_user_id INT, p_firstname VARCHAR2, p_lastname VARCHAR2, p_age INT, p_email VARCHAR2, p_city VARCHAR2, p_country VARCHAR2, p_date_of_birth DATE,p_phonenumber VARCHAR2,p_image VARCHAR2, p_username VARCHAR2);

PROCEDURE Get_Notfy_By_Admin(p_userid IN INT);

END User_Package;
---------------------------body ---------------------
CREATE OR REPLACE PACKAGE BODY User_Package AS
  PROCEDURE GET_ALL IS
  CU_ALL SYS_REFCURSOR;
  BEGIN
    OPEN CU_ALL FOR SELECT * FROM USERS;
    DBMS_SQL.RETURN_RESULT(CU_ALL);
  END GET_ALL;
-------------------------------------------------------
PROCEDURE GET_USER_BY_ID(uid IN Users.ID%TYPE)
AS
CUR_IT SYS_REFCURSOR;
BEGIN
OPEN CUR_IT FOR SELECT * FROM users WHERE users.ID = uid;
DBMS_SQL.RETURN_RESULT(CUR_IT);
END GET_USER_BY_ID;
 
------------------------------------------------------
PROCEDURE CREAT_NEW_USER (First_NAME IN users.FIRSTNAME%TYPE,Last_Name IN users.LASTNAME%TYPE,age IN USERS.AGE%TYPE,email IN USERS.EMAILE%TYPE,city IN USERS.CITY%TYPE,coun IN USERS.COUNTRY%TYPE,BIRTHDAY_DATE IN USERS.DATEOFBIRTH%TYPE ,REGISTER_DATE IN USERS.REGISTERDATE%TYPE,PHONE_NUMBER IN USERS.PHONENUMBER%TYPE,IMA IN USERS.IMAGE%TYPE )
AS 
BEGIN
INSERT INTO USERS VALUES (DEFAULT ,First_NAME,Last_Name,age,email,city,coun,BIRTHDAY_DATE,REGISTER_DATE,PHONE_NUMBER,IMA);
COMMIT;
END CREAT_NEW_USER;
 
------------------------------------------------------
PROCEDURE UPDATE_USER (uid IN Users.ID%TYPE,First_NAME IN users.FIRSTNAME%TYPE,Last_Name IN users.LASTNAME%TYPE,age IN USERS.AGE%TYPE,email IN USERS.EMAILE%TYPE,city IN USERS.CITY%TYPE,coun IN USERS.COUNTRY%TYPE,BIRTHDAY_DATE IN USERS.DATEOFBIRTH%TYPE ,REGISTER_DATE IN USERS.REGISTERDATE%TYPE,PHONE_NUMBER IN USERS.PHONENUMBER%TYPE,IMA IN USERS.IMAGE%TYPE )
AS
BEGIN
UPDATE users 
SET FIRSTNAME = First_NAME ,LASTNAME = Last_Name , AGE = age,EMAILE = email, CITY = city,COUNTRY = coun, DATEOFBIRTH = BIRTHDAY_DATE, REGISTERDATE = REGISTER_DATE, PHONENUMBER=PHONE_NUMBER , IMAGE=IMA
WHERE users.ID = uid;
COMMIT;
END UPDATE_USER;
 
------------------------------------------------------
PROCEDURE DELETE_USER (uid IN USERS.ID%TYPE)
AS
BEGIN
DELETE FROM users 
WHERE users.id = uid;
COMMIT;
END DELETE_USER;
 
------------------------------------------------------
PROCEDURE TotalRegisteredUsers AS
  U_all SYS_REFCURSOR;
  result INT;
BEGIN
  OPEN U_all FOR
    SELECT COUNT(*) INTO result FROM USERS;
  DBMS_SQL.RETURN_RESULT(U_all);
END TotalRegisteredUsers;
 
-------------------------------------------------------
    PROCEDURE GetUserProfile(user_id IN INT) 
    AS
    user_cursor SYS_REFCURSOR;
    BEGIN
        OPEN user_cursor FOR
            SELECT USERS.FIRSTNAME, USERS.LASTNAME, USERS.AGE, USERS.EMAILE, USERS.CITY, USERS.COUNTRY, USERS.DATEOFBIRTH, USERS.REGISTERDATE,USERS.IMAGE,USERS.PHONENUMBER, LOGIN.USERNAME
            FROM USERS 
            JOIN LOGIN 
            ON USERS.ID = LOGIN.USERID
            WHERE USERS.ID = user_id;
            DBMS_SQL.RETURN_RESULT(user_cursor);
    END GetUserProfile;
--------------------------------------------------------
PROCEDURE update_user_profile( p_user_id INT, p_firstname VARCHAR2, p_lastname VARCHAR2, p_age INT, p_email VARCHAR2, p_city VARCHAR2, p_country VARCHAR2, p_date_of_birth DATE,p_phonenumber VARCHAR2,p_image VARCHAR2, p_username VARCHAR2)
IS
BEGIN
   -- Update the USERS table
   UPDATE USERS u
   SET
      FIRSTNAME = p_firstname,
      LASTNAME = p_lastname,
      AGE = p_age,
      EMAILE = p_email,
      CITY = p_city,
      COUNTRY = p_country,
      DATEOFBIRTH = p_date_of_birth,
      PHONENUMBER=p_phonenumber,
      IMAGE=p_image
      
   WHERE
      ID = p_user_id;
   -- Update the LOGIN table
   UPDATE LOGIN l
   SET
      USERNAME = p_username
   WHERE
      USERID = p_user_id;
   COMMIT;
   DBMS_OUTPUT.PUT_LINE('User profile updated successfully.');
END update_user_profile;
--------------------------------------------------------------------------------
PROCEDURE Get_Notfy_By_Admin(p_userid IN INT)
AS 
N_USER SYS_REFCURSOR;
BEGIN
OPEN N_USER FOR SELECT N.MESSAGE,N.DTAEOFSEND,R.CONTENT,CH.CHANNELNAME,CH.IMAGENAME
FROM NOTIFICATION N
INNER JOIN REPORT R
ON N.REPORTID=R.ID
INNER JOIN CHANNEL CH
ON R.CHANNELID=CH.ID
INNER JOIN USERS U
ON CH.USERID=U.ID
WHERE U.ID=p_userid;
 DBMS_SQL.RETURN_RESULT(N_USER);
END Get_Notfy_By_Admin;

 
END User_Package;


------------------------------------------------------------------------
------------------------PACKAGES PAYMENT--------------------------------
------------------------------------------------------------------------
 
CREATE OR REPLACE PACKAGE Payment_Package AS
PROCEDURE GET_ALL;
PROCEDURE GET_PAYMENT_BY_ID(pid IN payment.ID%TYPE);
PROCEDURE CREAT_NEW_PAYMENT (Card_Name IN PAYMENT.CARDHOLDERNAME%TYPE,CARD_NUMBER IN PAYMENT.CARDNUMBER%TYPE,cvv IN PAYMENT.CVV%TYPE,EXPIRY_DATE IN PAYMENT.EXPIRYDATE%TYPE,PAYMENT_DATE IN PAYMENT.PAYMENTDATE%TYPE,TOTAL_AMOUNT IN PAYMENT.TOTALAMOUNT%TYPE,USER_ID IN PAYMENT.USERID%TYPE  );
PROCEDURE UPDATE_of_PAYMENT (pid in PAYMENT.ID%TYPE,Card_Name IN PAYMENT.CARDHOLDERNAME%TYPE,CARD_NUMBER IN PAYMENT.CARDNUMBER%TYPE,cvv IN PAYMENT.CVV%TYPE,EXPIRY_DATE IN PAYMENT.EXPIRYDATE%TYPE,PAYMENT_DATE IN PAYMENT.PAYMENTDATE%TYPE,TOTAL_AMOUNT IN PAYMENT.TOTALAMOUNT%TYPE,USER_ID IN PAYMENT.USERID%TYPE  );
PROCEDURE DELETE_PAYMENT (pid IN PAYMENT.ID%TYPE);
PROCEDURE Get_Paument_ByUserId(p_userid IN INT);
PROCEDURE Get_Paument_user;
PROCEDURE checkPayment(p_userid IN INT);
 
END Payment_Package;
-----------------------------BODY----------------------------
 
CREATE OR REPLACE PACKAGE BODY Payment_Package AS
 
  PROCEDURE GET_ALL IS
    CU_ALL SYS_REFCURSOR;
 
  BEGIN
    OPEN CU_ALL FOR SELECT * FROM PAYMENT;
 
    DBMS_SQL.RETURN_RESULT(CU_ALL);
  END GET_ALL;
  -------------------------------------------------------
PROCEDURE GET_PAYMENT_BY_ID(pid IN payment.ID%TYPE)
AS
    CUR_IT SYS_REFCURSOR;
  BEGIN
    OPEN CUR_IT FOR SELECT * FROM PAYMENT WHERE PAYMENT.ID = pid;
    DBMS_SQL.RETURN_RESULT(CUR_IT);
  END GET_PAYMENT_BY_ID;
   ----------------------------------------------------
PROCEDURE CREAT_NEW_PAYMENT (Card_Name IN PAYMENT.CARDHOLDERNAME%TYPE,CARD_NUMBER IN PAYMENT.CARDNUMBER%TYPE,cvv IN PAYMENT.CVV%TYPE,EXPIRY_DATE IN PAYMENT.EXPIRYDATE%TYPE,PAYMENT_DATE IN PAYMENT.PAYMENTDATE%TYPE,TOTAL_AMOUNT IN PAYMENT.TOTALAMOUNT%TYPE,USER_ID IN PAYMENT.USERID%TYPE  )
AS
 
BEGIN
INSERT INTO PAYMENT VALUES (DEFAULT ,Card_Name,CARD_NUMBER,cvv,EXPIRY_DATE,PAYMENT_DATE,TOTAL_AMOUNT,USER_ID);
COMMIT;
END CREAT_NEW_PAYMENT;
---------------------------------------------------------
PROCEDURE UPDATE_of_PAYMENT (pid in PAYMENT.ID%TYPE,Card_Name IN PAYMENT.CARDHOLDERNAME%TYPE,CARD_NUMBER IN PAYMENT.CARDNUMBER%TYPE,cvv IN PAYMENT.CVV%TYPE,EXPIRY_DATE IN PAYMENT.EXPIRYDATE%TYPE,PAYMENT_DATE IN PAYMENT.PAYMENTDATE%TYPE,TOTAL_AMOUNT IN PAYMENT.TOTALAMOUNT%TYPE,USER_ID IN PAYMENT.USERID%TYPE  )
as
BEGIN
UPDATE PAYMENT 
SET CARDHOLDERNAME = Card_Name ,CARDNUMBER = CARD_NUMBER , CVV = cvv,EXPIRYDATE = EXPIRY_DATE,PAYMENTDATE = PAYMENT_DATE,TOTALAMOUNT = TOTAL_AMOUNT,USERID = USER_ID
WHERE PAYMENT.ID = pid;
COMMIT;
END UPDATE_of_PAYMENT;
--------------------------------------------------------------
PROCEDURE DELETE_PAYMENT (pid IN PAYMENT.ID%TYPE)AS
BEGIN
DELETE FROM  PAYMENT
WHERE PAYMENT.ID = pid;
COMMIT;
END DELETE_PAYMENT;
-----------------------------------------------------------------
PROCEDURE Get_Paument_ByUserId(p_userid IN INT)
AS
  PY_ALL SYS_REFCURSOR;
BEGIN
OPEN PY_ALL FOR SELECT * FROM PAYMENT 
WHERE PAYMENT.USERID=p_userid;
DBMS_SQL.RETURN_RESULT(PY_ALL);
END Get_Paument_ByUserId;
--------------------------------------------------------------------------------------
PROCEDURE Get_Paument_user
AS
    PU_ALL SYS_REFCURSOR;
  BEGIN
    OPEN PU_ALL FOR SELECT P.PAYMENTDATE,P.TOTALAMOUNT,U.FIRSTNAME,U.LASTNAME,U.EMAILE
    FROM PAYMENT P
    INNER JOIN USERS U
    ON P.USERID=U.ID;
    DBMS_SQL.RETURN_RESULT(PU_ALL);
  END Get_Paument_user;
--------------------------------------------------------------------------------------
PROCEDURE checkPayment(p_userid IN INT)
AS
    CUR_IT SYS_REFCURSOR;
BEGIN 
    OPEN CUR_IT FOR SELECT * FROM PAYMENT
    WHERE PAYMENT.USERID=p_userid;
    DBMS_SQL.RETURN_RESULT(CUR_IT);
END checkPayment;
END Payment_Package;


------------------------------------------------------------------------
------------------------PACKAGES CHANNEL--------------------------------
------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE CHANNEL_PKG AS
  -- Procedure to display all CHANNELs in the database
  PROCEDURE display_all_channels;
 
  -- Procedure to create a new CHANNEL
  PROCEDURE create_channel(p_channel_name IN VARCHAR2,p_ch IN CHANNEL.Description%TYPE, p_image_name   IN VARCHAR2,p_user_id  IN INT, p_backim IN CHANNEL.BACKIMAGE%TYPE);
 
  -- Procedure to update a CHANNEL
  PROCEDURE update_channel(p_channel_id  IN INT,p_channel_name IN VARCHAR2,p_ch IN CHANNEL.Description%TYPE, p_image_name   IN VARCHAR2,p_user_id  IN INT, p_backim IN CHANNEL.BACKIMAGE%TYPE);
 
  -- Procedure to delete a CHANNEL
  PROCEDURE delete_channel(p_channel_id IN INT);
 
  -- Procedure to get CHANNEL by ID
PROCEDURE get_channel_by_id(p_channel_id  IN INT );
PROCEDURE SearchChanell(Chname in varchar);

PROCEDURE TotalChannels;
PROCEDURE GetChannelInvoiceInfo;
PROCEDURE get_channels_by_user_id(p_user_id IN INT);


END CHANNEL_PKG;
-------------------------------BODY-----------------------------
 
CREATE OR REPLACE PACKAGE BODY CHANNEL_PKG AS
  -- Procedure to display all CHANNELs in the database
  PROCEDURE display_all_channels IS
    v_channel_cursor SYS_REFCURSOR;
  BEGIN
    OPEN v_channel_cursor FOR
      SELECT * FROM CHANNEL;
    DBMS_SQL.RETURN_RESULT(v_channel_cursor);
  END display_all_channels;
 
------------------------------------------------------------
  -- Procedure to create a new CHANNEL
  PROCEDURE create_channel (p_channel_name IN VARCHAR2,p_ch IN CHANNEL.Description%TYPE, p_image_name   IN VARCHAR2,p_user_id  IN INT, p_backim IN CHANNEL.BACKIMAGE%TYPE)
   IS
  BEGIN
    INSERT INTO CHANNEL VALUES (DEFAULT,p_channel_name,p_ch, p_image_name, p_user_id,p_backim);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Channel created successfully.');
  END create_channel;
----------------------------------------------------------------------------------- 
  -- Procedure to update a CHANNEL
  PROCEDURE update_channel(p_channel_id  IN INT,p_channel_name IN VARCHAR2,p_ch IN CHANNEL.Description%TYPE, p_image_name   IN VARCHAR2,p_user_id  IN INT, p_backim IN CHANNEL.BACKIMAGE%TYPE)
  IS
  BEGIN
    UPDATE CHANNEL
    SET CHANNELNAME = p_channel_name,
     Description=p_ch,
        IMAGENAME = p_image_name,
             USERID = p_user_id,
             BACKIMAGE=p_backim
            
    WHERE ID = p_channel_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Channel updated successfully.');
  END update_channel;
------------------------------------------------------------------------- 
  -- Procedure to delete a CHANNEL
  PROCEDURE delete_channel(p_channel_id IN INT) IS
  BEGIN
    DELETE FROM CHANNEL WHERE ID = p_channel_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Channel deleted successfully.');
  END delete_channel;
 
  -- Procedure to get CHANNEL by ID
  PROCEDURE get_channel_by_id(p_channel_id  IN INT ) IS 
    p_channel_cur SYS_REFCURSOR;
  BEGIN
    OPEN p_channel_cur FOR
      SELECT * FROM CHANNEL WHERE ID = p_channel_id;
      DBMS_SQL.RETURN_RESULT(p_channel_cur);
  END get_channel_by_id;
------------------------------------------------------------------ 
  PROCEDURE SearchChanell(Chname in varchar)
  as
  Cname SYS_REFCURSOR;
  BEGIN
  OPEN Cname FOR
  SELECT CHANNEL.CHANNELNAME,CHANNEL.IMAGENAME,USERS.FIRSTNAME,USERS.EMAILE,USERS.REGISTERDATE
  FROM CHANNEL 
  INNER JOIN USERS 
  ON CHANNEL.USERID=USERS.ID
  where (upper(CHANNEL.CHANNELNAME) like '%'||upper(Chname) ||'%') and CHANNEL.CHANNELNAME=Chname;
  DBMS_SQL.RETURN_RESULT(Cname);
  END SearchChanell;
----------------------------------------------------------------------------  
  
    PROCEDURE TotalChannels AS
    C_all SYS_REFCURSOR;
    result INT;
    BEGIN
    OPEN C_all FOR
    SELECT COUNT(*) INTO result FROM CHANNEL;
     DBMS_SQL.RETURN_RESULT(C_all);
 
END TotalChannels;
---------------------------------------------------------------------------------------
PROCEDURE GetChannelInvoiceInfo AS
     p_cursor SYS_REFCURSOR;
 
BEGIN
     OPEN p_cursor FOR
         SELECT
             CHANNEL.CHANNELNAME,
             CHANNEL.USERID,
             USERS.REGISTERDATE,
             USERS.FIRSTNAME,
             USERS.LASTNAME,
             USERS.EMAILE,
             INVOICE.PAYMENTSTATUS,
             INVOICE.DATEOFINVOICE,
             INVOICE.TOTALAMOUNT,
             INVOICE.SUBSTART,
             INVOICE.SUBEND,
             INVOICE.CHANNELID
         FROM
             CHANNEL 
             JOIN USERS  ON CHANNEL.USERID = USERS.ID
             JOIN INVOICE ON CHANNEL.ID = INVOICE.CHANNELID;
             DBMS_SQL.RETURN_RESULT(p_cursor);
END GetChannelInvoiceInfo;
---------------------------------------------------------------------------------
PROCEDURE get_channels_by_user_id(p_user_id IN INT) IS
  p_channel_cur SYS_REFCURSOR;
BEGIN
  OPEN p_channel_cur FOR
    SELECT * FROM CHANNEL WHERE USERID = p_user_id;
  DBMS_SQL.RETURN_RESULT(p_channel_cur);
END get_channels_by_user_id;
 

END CHANNEL_PKG;


------------------------------------------------------------------------
------------------------PACKAGES REPORT---------------------------------
------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE REPORT_PKG AS
  -- Procedure to create a new REPORT
  PROCEDURE create_report(p_content     IN VARCHAR2,p_date_of_send IN DATE,p_channel_id   IN INT,r_status IN REPORT.STATUS%TYPE);
 
  PROCEDURE update_report(p_report_id    IN INT,p_content      IN VARCHAR2,p_date_of_send IN DATE ,p_channel_id   IN INT,r_status IN REPORT.STATUS%TYPE);
 
  PROCEDURE delete_report(p_report_id IN INT);
  
  PROCEDURE display_all_reports;
    PROCEDURE get_report_by_id( p_report_id   IN INT  );

    PROCEDURE GetReportsForChannelByName(channel_name IN VARCHAR2);
    PROCEDURE GetReportChannel;
    PROCEDURE SearchReDateCount(DateFrom IN DATE,DateTo IN DATE);
    PROCEDURE GetNumberOfReport;
    PROCEDURE ReportId;
    END REPORT_PKG;

------------------------BODY--------------------------------------
 
CREATE OR REPLACE PACKAGE BODY REPORT_PKG AS
  -- Procedure to create a new REPORT
  PROCEDURE create_report(p_content     IN VARCHAR2,p_date_of_send IN DATE,p_channel_id   IN INT,r_status IN REPORT.STATUS%TYPE) 
  IS
  BEGIN
    INSERT INTO REPORT (CONTENT, DTAEOFSEND, CHANNELID,STATUS)
    VALUES (p_content, p_date_of_send, p_channel_id,r_status);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Report created successfully.');
  END create_report;
-------------------------------------------------------
  -- Procedure to update a REPORT
  PROCEDURE update_report(p_report_id    IN INT,p_content      IN VARCHAR2,p_date_of_send IN DATE ,p_channel_id   IN INT,r_status IN REPORT.STATUS%TYPE)
  IS
  BEGIN
    UPDATE REPORT
    SET CONTENT = p_content,
        DTAEOFSEND = p_date_of_send,
       CHANNELID  = p_channel_id,
       STATUS = r_status
    WHERE ID = p_report_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Report updated successfully.');
  END update_report;
----------------------------------------------------------------------
  -- Procedure to delete a REPORT
  PROCEDURE delete_report(p_report_id IN INT) IS
  BEGIN
    DELETE FROM REPORT WHERE ID = p_report_id;
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Report deleted successfully.');
  END delete_report;
-----------------------------------------------------------------------
  -- Procedure to display all REPORTs in the database
  PROCEDURE display_all_reports IS
    v_report_cursor SYS_REFCURSOR;
  BEGIN
    OPEN v_report_cursor FOR
      SELECT * FROM REPORT;
    DBMS_SQL.RETURN_RESULT(v_report_cursor);
  END display_all_reports;
-------------------------------------------------------------------
  -- Procedure to get REPORT by ID
  PROCEDURE get_report_by_id( p_report_id   IN INT  ) IS
    p_report_cur  SYS_REFCURSOR ;
  BEGIN
    OPEN p_report_cur FOR
      SELECT * FROM REPORT WHERE ID = p_report_id;
       DBMS_SQL.RETURN_RESULT(p_report_cur);
  END get_report_by_id;
-----------------------------------------------------------------------
  
  -- Create a procedure to get reports for a specific channel
PROCEDURE GetReportsForChannelByName(channel_name IN VARCHAR2) AS

      reports_cursor SYS_REFCURSOR;

   BEGIN

      OPEN reports_cursor FOR

         SELECT r.ID, r.CONTENT, r.DTAEOFSEND, c.CHANNELNAME

         FROM REPORT r

         JOIN CHANNEL c ON r.CHANNELID = c.ID

         WHERE c.CHANNELNAME = channel_name;
 
      DBMS_SQL.RETURN_RESULT(reports_cursor);

   END GetReportsForChannelByName;
   
---------------------------------------------------------------------------   


PROCEDURE GetReportChannel 
AS
all_r SYS_REFCURSOR;
BEGIN
OPEN all_r FOR SELECT REPORT.ID,REPORT.CONTENT,REPORT.DTAEOFSEND,REPORT.STATUS,CHANNEL.CHANNELNAME
FROM REPORT
INNER JOIN CHANNEL
ON REPORT.CHANNELID=CHANNEL.ID;
DBMS_SQL.RETURN_RESULT(all_r);
END GetReportChannel;

---------------------------------------------------------------------------------------
PROCEDURE SearchReDateCount(DateFrom IN DATE,DateTo IN DATE)
AS
  RD_all SYS_REFCURSOR;
  result INT;
BEGIN
  OPEN RD_all FOR
    SELECT COUNT(*) INTO result FROM REPORT;
  DBMS_SQL.RETURN_RESULT(RD_all);
END SearchReDateCount;

----------------------------------------------------------------------------------------
PROCEDURE GetNumberOfReport
AS
  RC_all SYS_REFCURSOR;
  result INT;
BEGIN
  OPEN RC_all FOR
    SELECT COUNT(*) INTO result FROM REPORT;
  DBMS_SQL.RETURN_RESULT(RC_all);
END GetNumberOfReport;
------------------------------------------------------------------------
PROCEDURE ReportId
AS
rid SYS_REFCURSOR;
BEGIN
OPEN rid FOR SELECT ID FROM REPORT;
 DBMS_SQL.RETURN_RESULT(rid);
END ReportId;

END REPORT_PKG;


------------------------------------------------------------------------
------------------------PACKAGES NOTIFICATION---------------------------
------------------------------------------------------------------------


CREATE OR REPLACE PACKAGE NOTIFICATION_PKG AS

  PROCEDURE create_notification(p_message      IN VARCHAR2,p_date_of_send  IN DATE,p_status IN VARCHAR2,p_report_id     IN INT);

  PROCEDURE update_notification(p_notification_id IN INT,p_message         IN VARCHAR2,p_date_of_send    IN DATE ,p_status IN NOTIFICATION.STATUS%TYPE,p_report_id     IN INT);

  PROCEDURE delete_notification(p_notification_id IN INT);

  PROCEDURE display_all_notifications;

  PROCEDURE get_notification_by_id( p_notification_id IN INT);
  PROCEDURE Check_Notification(rid IN INT);
  PROCEDURE Delete_NotificationByRId(rid IN INT);
  PROCEDURE Check_Notifcation(p_userid IN INT);
  


END NOTIFICATION_PKG;

-------------------------------BODY------------------------------------
 
CREATE OR REPLACE PACKAGE BODY NOTIFICATION_PKG AS

  -- Procedure to create a new NOTIFICATION

  PROCEDURE create_notification(p_message      IN VARCHAR2,p_date_of_send  IN DATE,p_status IN VARCHAR2,p_report_id     IN INT)
  IS

  BEGIN

    INSERT INTO NOTIFICATION VALUES (DEFAULT,p_message, p_date_of_send,p_status,p_report_id);

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Notification created successfully.');

  END create_notification;
 
-----------------------------------------------------------------------

  PROCEDURE update_notification(p_notification_id IN INT,p_message         IN VARCHAR2,p_date_of_send    IN DATE ,p_status IN NOTIFICATION.STATUS%TYPE,p_report_id     IN INT)
  IS

  BEGIN

    UPDATE NOTIFICATION

    SET MESSAGE = p_message,

        DTAEOFSEND = p_date_of_send,
       STATUS = p_status,
          REPORTID = p_report_id

    WHERE NID = p_notification_id;

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Notification updated successfully.');

  END update_notification;
 
----------------------------------------------------------------------

  PROCEDURE delete_notification(p_notification_id IN INT) IS

  BEGIN

    DELETE FROM NOTIFICATION WHERE NID = p_notification_id;

    COMMIT;

    DBMS_OUTPUT.PUT_LINE('Notification deleted successfully.');

  END delete_notification;
----------------------------------------------------------------------

  PROCEDURE display_all_notifications IS

    v_notification_cursor SYS_REFCURSOR;

  BEGIN

    OPEN v_notification_cursor FOR

      SELECT * FROM NOTIFICATION;

    DBMS_SQL.RETURN_RESULT(v_notification_cursor);

  END display_all_notifications;
--------------------------------------------------------------------
  PROCEDURE get_notification_by_id(p_notification_id IN INT ) IS

    p_notification_cur  SYS_REFCURSOR;

  BEGIN

    OPEN p_notification_cur FOR

      SELECT * FROM NOTIFICATION WHERE NID = p_notification_id;

          DBMS_SQL.RETURN_RESULT(p_notification_cur);
 
  END get_notification_by_id;
------------------------------------------------------------------------------

PROCEDURE Check_Notification(rid IN INT)
AS
    RI_CHECK SYS_REFCURSOR;
BEGIN 
    OPEN RI_CHECK FOR SELECT * FROM NOTIFICATION WHERE REPORTID=rid;
    DBMS_SQL.RETURN_RESULT(RI_CHECK);
END Check_Notification;
------------------------------------------------------------------------------

PROCEDURE Delete_NotificationByRId(rid IN INT) 
AS
  BEGIN
  DELETE FROM NOTIFICATION WHERE REPORTID = rid;
  COMMIT;

END Delete_NotificationByRId;
-------------------------------------------------------------------------------
PROCEDURE Check_Notifcation(p_userid IN INT)
AS
    CN_IT SYS_REFCURSOR;
BEGIN 
    OPEN CN_IT FOR SELECT * FROM NOTIFICATION WHERE NOTIFICATION.USERID=p_userid;
    DBMS_SQL.RETURN_RESULT(CN_IT);
END Check_Notifcation;

END NOTIFICATION_PKG;


----------------------------------------------------------------------------
--------------------------------Footer package -----------------------------
----------------------------------------------------------------------------
 
 
CREATE OR REPLACE PACKAGE Footer_Package AS
PROCEDURE GET_ALL;
PROCEDURE GET_FOOTER_BY_ID(fid IN FOOTER.ID%TYPE);
PROCEDURE CREAT_NEW_FOOTER (Xaccount IN FOOTER.X%TYPE,FACEBOOKaccount IN FOOTER.FACEBOOK%TYPE,INSTAGRAMaccount IN FOOTER.INSTAGRAM%TYPE,WHATSAPPaccount IN FOOTER.WHATSAPP%TYPE,GMAILaccount IN FOOTER.GMAIL%TYPE,con IN FOOTER.CONTENTS%TYPE );
PROCEDURE UPDATE_FOOTER (fid IN FOOTER.ID%TYPE,Xaccount IN FOOTER.X%TYPE,FACEBOOKaccount IN FOOTER.FACEBOOK%TYPE,INSTAGRAMaccount IN FOOTER.INSTAGRAM%TYPE,WHATSAPPaccount IN FOOTER.WHATSAPP%TYPE,GMAILaccount IN FOOTER.GMAIL%TYPE,con IN FOOTER.CONTENTS%TYPE );
PROCEDURE DELETE_FOOTER (fid IN FOOTER.ID%TYPE);
 
END Footer_Package;
-------------------------------BODY--------------------------------------------
 
CREATE OR REPLACE PACKAGE BODY Footer_Package AS
 
  PROCEDURE GET_ALL IS
    CU_ALL SYS_REFCURSOR;
 
  BEGIN
    OPEN CU_ALL FOR SELECT * FROM FOOTER;
 
    DBMS_SQL.RETURN_RESULT(CU_ALL);
  END GET_ALL;
  -------------------------------------------------------
PROCEDURE GET_FOOTER_BY_ID(fid IN FOOTER.ID%TYPE)
IS
    CUR_IT SYS_REFCURSOR;
  BEGIN
    OPEN CUR_IT FOR SELECT * FROM FOOTER WHERE FOOTER.ID = fid;
    DBMS_SQL.RETURN_RESULT(CUR_IT);
  END GET_FOOTER_BY_ID;
   ----------------------------------------------------
PROCEDURE CREAT_NEW_FOOTER (Xaccount IN FOOTER.X%TYPE,FACEBOOKaccount IN FOOTER.FACEBOOK%TYPE,INSTAGRAMaccount IN FOOTER.INSTAGRAM%TYPE,WHATSAPPaccount IN FOOTER.WHATSAPP%TYPE,GMAILaccount IN FOOTER.GMAIL%TYPE,con IN FOOTER.CONTENTS%TYPE )
AS
 
BEGIN
INSERT INTO FOOTER VALUES (DEFAULT ,Xaccount,FACEBOOKaccount,INSTAGRAMaccount,WHATSAPPaccount,GMAILaccount,con);
COMMIT;
END CREAT_NEW_FOOTER;
-----------------------------------------------------------
PROCEDURE UPDATE_FOOTER (fid IN FOOTER.ID%TYPE,Xaccount IN FOOTER.X%TYPE,FACEBOOKaccount IN FOOTER.FACEBOOK%TYPE,INSTAGRAMaccount IN FOOTER.INSTAGRAM%TYPE,WHATSAPPaccount IN FOOTER.WHATSAPP%TYPE,GMAILaccount IN FOOTER.GMAIL%TYPE,con IN FOOTER.CONTENTS%TYPE )
AS
BEGIN
UPDATE FOOTER 
SET X = Xaccount ,FACEBOOK = FACEBOOKaccount , INSTAGRAM = INSTAGRAMaccount ,WHATSAPP = WHATSAPPaccount ,GMAIL = GMAILaccount ,CONTENTS = con
WHERE FOOTER.ID = fid;
COMMIT;
END UPDATE_FOOTER;
--------------------------------------------------------------
PROCEDURE DELETE_FOOTER (fid IN FOOTER.ID%TYPE)
AS
BEGIN
DELETE FROM FOOTER 
WHERE FOOTER.id = fid;
COMMIT;
END DELETE_FOOTER;
end Footer_Package;
 
 
----------------------------------------------------------------------------
--------------------------------HOME package -------------------------------
----------------------------------------------------------------------------
 
 
CREATE OR REPLACE PACKAGE Home_Package AS
PROCEDURE GET_ALL;
PROCEDURE GET_HOME_BY_ID(hid IN HOME.ID%TYPE);
PROCEDURE CREAT_NEW_HOME (TITLES IN HOME.TITLE%TYPE,CONTENT IN HOME.CONTENTS%TYPE,IMAGENAMES IN HOME.IMAGENAME%TYPE,FOTERID IN HOME.FOOTERID%TYPE );
PROCEDURE UPDATE_HOME  (hid IN HOME.ID%TYPE,TITLES IN HOME.TITLE%TYPE,CONTENT IN HOME.CONTENTS%TYPE,IMAGENAMES IN HOME.IMAGENAME%TYPE);
PROCEDURE DELETE_HOME (hid IN HOME.ID%TYPE);
 
END Home_Package;
------------------------------BODY---------------------------------------------
 
CREATE OR REPLACE PACKAGE BODY Home_Package AS
 
  PROCEDURE GET_ALL IS
    CU_ALL SYS_REFCURSOR;
 
  BEGIN
    OPEN CU_ALL FOR SELECT * FROM HOME;
 
    DBMS_SQL.RETURN_RESULT(CU_ALL);
  END GET_ALL;
  -------------------------------------------------------
PROCEDURE GET_HOME_BY_ID(hid IN HOME.ID%TYPE)
IS
    CUR_IT SYS_REFCURSOR;
  BEGIN
    OPEN CUR_IT FOR SELECT * FROM HOME WHERE HOME.ID = hid;
    DBMS_SQL.RETURN_RESULT(CUR_IT);
  END GET_HOME_BY_ID;
   ----------------------------------------------------
PROCEDURE CREAT_NEW_HOME (TITLES IN HOME.TITLE%TYPE,CONTENT IN HOME.CONTENTS%TYPE,IMAGENAMES IN HOME.IMAGENAME%TYPE,FOTERID IN HOME.FOOTERID%TYPE )
AS
 
BEGIN
INSERT INTO HOME VALUES (DEFAULT ,TITLES,CONTENT,IMAGENAMES,22);
COMMIT;
END CREAT_NEW_HOME;
---------------------------------------------------------
PROCEDURE UPDATE_HOME (hid IN HOME.ID%TYPE,TITLES IN HOME.TITLE%TYPE,CONTENT IN HOME.CONTENTS%TYPE,IMAGENAMES IN HOME.IMAGENAME%TYPE)
AS
BEGIN
UPDATE HOME 
SET TITLE = TITLES ,CONTENTS = CONTENT , IMAGENAME = IMAGENAMES
WHERE HOME.ID = hid;
COMMIT;
END UPDATE_HOME;
------------------------------------------------------------
PROCEDURE DELETE_HOME (hid IN HOME.ID%TYPE)AS
BEGIN
DELETE FROM HOME 
WHERE HOME.id = hid;
COMMIT;
END DELETE_HOME;
end Home_Package;
 
 
 

----------------------------------------------------------------------------
--------------------------------ABOUT package -------------------------------
----------------------------------------------------------------------------
 
 
CREATE OR REPLACE PACKAGE About_Package AS
PROCEDURE GET_ALL;
PROCEDURE GET_ABOUT_BY_ID(aid IN ABOUT.ID%TYPE);
PROCEDURE CREAT_NEW_ABOUT (TITLES IN ABOUT.TITLE%TYPE,CONTENT IN ABOUT.CONTENTS%TYPE,IMAGENAMES IN ABOUT.IMAGENAME%TYPE,HOMESID IN ABOUT.HOMEID%TYPE );
PROCEDURE UPDATE_ABOUT  (aid IN ABOUT.ID%TYPE,TITLES IN ABOUT.TITLE%TYPE,CONTENT IN ABOUT.CONTENTS%TYPE,IMAGENAMES IN ABOUT.IMAGENAME%TYPE);
PROCEDURE DELETE_ABOUT (aid IN ABOUT.ID%TYPE);
 
END About_Package;
------------------------------BODY---------------------------------------------
 
CREATE OR REPLACE PACKAGE BODY About_Package AS
 
  PROCEDURE GET_ALL IS
    CU_ALL SYS_REFCURSOR;
 
  BEGIN
    OPEN CU_ALL FOR SELECT * FROM ABOUT;
 
    DBMS_SQL.RETURN_RESULT(CU_ALL);
  END GET_ALL;
--  -------------------------------------------------------
PROCEDURE GET_ABOUT_BY_ID(aid IN ABOUT.ID%TYPE)
IS
    CUR_IT SYS_REFCURSOR;
  BEGIN
    OPEN CUR_IT FOR SELECT * FROM ABOUT WHERE ABOUT.ID = aid;
    DBMS_SQL.RETURN_RESULT(CUR_IT);
  END GET_ABOUT_BY_ID;
   --------------------------------------------------
PROCEDURE CREAT_NEW_ABOUT (TITLES IN ABOUT.TITLE%TYPE,CONTENT IN ABOUT.CONTENTS%TYPE,IMAGENAMES IN ABOUT.IMAGENAME%TYPE,HOMESID IN ABOUT.HOMEID%TYPE  )
AS
 
BEGIN
INSERT INTO ABOUT VALUES (DEFAULT ,TITLES,CONTENT,IMAGENAMES,1);
COMMIT;
END CREAT_NEW_ABOUT;
---------------------------------------------------------
PROCEDURE UPDATE_ABOUT  (aid IN ABOUT.ID%TYPE,TITLES IN ABOUT.TITLE%TYPE,CONTENT IN ABOUT.CONTENTS%TYPE,IMAGENAMES IN ABOUT.IMAGENAME%TYPE)
AS
BEGIN
UPDATE ABOUT 
SET TITLE = TITLES ,CONTENTS = CONTENT , IMAGENAME = IMAGENAMES
WHERE ABOUT.ID = aid;
COMMIT;
END UPDATE_ABOUT;
------------------------------------------------------------
PROCEDURE DELETE_ABOUT (aid IN ABOUT.ID%TYPE)
AS
BEGIN
DELETE FROM ABOUT 
WHERE ABOUT.ID = aid;
COMMIT;
END DELETE_ABOUT;
end About_Package;
 
----------------------------------------------------------------------------
--------------------------------CONTACT package -------------------------------
----------------------------------------------------------------------------
 
 
CREATE OR REPLACE PACKAGE Contact_Package AS
PROCEDURE GET_ALL;
PROCEDURE GET_CONTACT_BY_ID(cid IN CONTACT.ID%TYPE);
PROCEDURE CREAT_NEW_CONTACT (NAMES IN CONTACT.NAME%TYPE,SUBJECTS IN CONTACT.SUBJECT%TYPE,CONTENTS IN CONTACT.CONTENT%TYPE,EMAILS IN CONTACT.EMAIL%TYPE ,HOMESID IN CONTACT.HOMEID%TYPE );
PROCEDURE UPDATE_CONTACT (cid IN CONTACT.ID%TYPE,NAMES IN CONTACT.NAME%TYPE,SUBJECTS IN CONTACT.SUBJECT%TYPE,CONTENTS IN CONTACT.CONTENT%TYPE,EMAILS IN CONTACT.EMAIL%TYPE ,HOMESID IN CONTACT.HOMEID%TYPE );
PROCEDURE DELETE_CONTACT (cid IN CONTACT.ID%TYPE);
 
END Contact_Package;
-----------------------------BODY----------------------------------------------

CREATE OR REPLACE PACKAGE BODY Contact_Package AS
  PROCEDURE GET_ALL IS
    CU_ALL SYS_REFCURSOR;
  BEGIN
    OPEN CU_ALL FOR SELECT * FROM CONTACT;
    DBMS_SQL.RETURN_RESULT(CU_ALL);
  END GET_ALL;
--  -------------------------------------------------------
PROCEDURE GET_CONTACT_BY_ID(cid IN CONTACT.ID%TYPE)
IS
    CUR_IT SYS_REFCURSOR;
  BEGIN
    OPEN CUR_IT FOR SELECT * FROM CONTACT WHERE CONTACT.ID = cid;
    DBMS_SQL.RETURN_RESULT(CUR_IT);
  END GET_CONTACT_BY_ID;
   ------------------------------------------------
PROCEDURE CREAT_NEW_CONTACT (NAMES IN CONTACT.NAME%TYPE,SUBJECTS IN CONTACT.SUBJECT%TYPE,CONTENTS IN CONTACT.CONTENT%TYPE,EMAILS IN CONTACT.EMAIL%TYPE ,HOMESID IN CONTACT.HOMEID%TYPE )
AS
BEGIN
INSERT INTO CONTACT VALUES (DEFAULT ,NAMES,SUBJECTS,CONTENTS,EMAILS,null);
COMMIT;
END CREAT_NEW_CONTACT;
---------------------------------------------------------
PROCEDURE UPDATE_CONTACT (cid IN CONTACT.ID%TYPE,NAMES IN CONTACT.NAME%TYPE,SUBJECTS IN CONTACT.SUBJECT%TYPE,CONTENTS IN CONTACT.CONTENT%TYPE,EMAILS IN CONTACT.EMAIL%TYPE ,HOMESID IN CONTACT.HOMEID%TYPE )
AS
BEGIN
UPDATE CONTACT 
SET NAME = NAMES ,SUBJECT = SUBJECTS , CONTENT = CONTENTS,EMAIL = EMAILS,HOMEID=HOMESID
WHERE CONTACT.ID = cid;
COMMIT;
END UPDATE_CONTACT;
------------------------------------------------------------
PROCEDURE DELETE_CONTACT (cid IN CONTACT.ID%TYPE)
AS
BEGIN
DELETE FROM CONTACT 
WHERE CONTACT.ID= cid;
COMMIT;
END DELETE_CONTACT;
end Contact_Package;
----------------------------------------------------------------------------
--------------------------------TEAMMEMBERS package ------------------------
----------------------------------------------------------------------------
 
 
CREATE OR REPLACE PACKAGE TEAMMEMBERS_Package AS
PROCEDURE GET_ALL;
PROCEDURE GET_TEAMMEMBERS_BY_ID(tid IN TEAMMEMBERS.ID%TYPE);
PROCEDURE CREAT_NEW_TEAMMEMBERS (MEMBERNAMES IN TEAMMEMBERS.MEMBERNAME%TYPE,ROLES IN TEAMMEMBERS.ROLE%TYPE,IMAGENAMES IN TEAMMEMBERS.IMAGENAME%TYPE,EMAILS IN TEAMMEMBERS.EMAIL%TYPE ,HOMESID IN TEAMMEMBERS.HOMEID%TYPE,PHON IN TEAMMEMBERS.PHONENUMBER%TYPE, LIN IN TEAMMEMBERS.LINKEDIN%TYPE );
PROCEDURE UPDATE_TEAMMEMBERS (tid IN TEAMMEMBERS.ID%TYPE,MEMBERNAMES IN TEAMMEMBERS.MEMBERNAME%TYPE,ROLES IN TEAMMEMBERS.ROLE%TYPE,IMAGENAMES IN TEAMMEMBERS.IMAGENAME%TYPE,EMAILS IN TEAMMEMBERS.EMAIL%TYPE ,PHON IN TEAMMEMBERS.PHONENUMBER%TYPE,LIN IN TEAMMEMBERS.LINKEDIN%TYPE);
PROCEDURE DELETE_TEAMMEMBERS (tid IN TEAMMEMBERS.ID%TYPE);
 
END TEAMMEMBERS_Package;
-----------------------------------BODY----------------------------------------
 
CREATE OR REPLACE PACKAGE BODY TEAMMEMBERS_Package AS
 
  PROCEDURE GET_ALL IS
    CU_ALL SYS_REFCURSOR;
 
  BEGIN
    OPEN CU_ALL FOR SELECT * FROM TEAMMEMBERS;
 
    DBMS_SQL.RETURN_RESULT(CU_ALL);
  END GET_ALL;
  -------------------------------------------------------
PROCEDURE GET_TEAMMEMBERS_BY_ID(tid IN TEAMMEMBERS.ID%TYPE)
IS
    CUR_IT SYS_REFCURSOR;
  BEGIN
    OPEN CUR_IT FOR SELECT * FROM TEAMMEMBERS WHERE TEAMMEMBERS.ID = tid;
    DBMS_SQL.RETURN_RESULT(CUR_IT);
  END GET_TEAMMEMBERS_BY_ID;
   ----------------------------------------------
PROCEDURE CREAT_NEW_TEAMMEMBERS (MEMBERNAMES IN TEAMMEMBERS.MEMBERNAME%TYPE,ROLES IN TEAMMEMBERS.ROLE%TYPE,IMAGENAMES IN TEAMMEMBERS.IMAGENAME%TYPE,EMAILS IN TEAMMEMBERS.EMAIL%TYPE ,HOMESID IN TEAMMEMBERS.HOMEID%TYPE,PHON IN TEAMMEMBERS.PHONENUMBER%TYPE, LIN IN TEAMMEMBERS.LINKEDIN%TYPE )
AS
 
BEGIN
INSERT INTO TEAMMEMBERS VALUES (DEFAULT ,MEMBERNAMES,ROLES,IMAGENAMES,EMAILS,1,PHON,LIN);

COMMIT;
END CREAT_NEW_TEAMMEMBERS;
-------------------------------------------------------
PROCEDURE UPDATE_TEAMMEMBERS (tid IN TEAMMEMBERS.ID%TYPE,MEMBERNAMES IN TEAMMEMBERS.MEMBERNAME%TYPE,ROLES IN TEAMMEMBERS.ROLE%TYPE,IMAGENAMES IN TEAMMEMBERS.IMAGENAME%TYPE,EMAILS IN TEAMMEMBERS.EMAIL%TYPE,PHON IN TEAMMEMBERS.PHONENUMBER%TYPE,LIN IN TEAMMEMBERS.LINKEDIN%TYPE)
AS
BEGIN
UPDATE TEAMMEMBERS 
SET MEMBERNAME = MEMBERNAMES ,ROLE = ROLES , IMAGENAME = IMAGENAMES,EMAIL = EMAILS,PHONENUMBER=PHON,LINKEDIN=LIN
WHERE TEAMMEMBERS.ID = tid;
COMMIT;
END UPDATE_TEAMMEMBERS;
------------------------------------------------------------
PROCEDURE DELETE_TEAMMEMBERS (tid IN TEAMMEMBERS.ID%TYPE)
AS
BEGIN
DELETE FROM TEAMMEMBERS 
WHERE TEAMMEMBERS.ID = tid;
COMMIT;
END DELETE_TEAMMEMBERS;
end TEAMMEMBERS_Package;
----------------------------------------------------------------------------
--------------------------------CHANNELSUB package ------------------------
----------------------------------------------------------------------------

CREATE OR REPLACE PACKAGE CHANNELSUB_Package AS
PROCEDURE GET_ALL;
PROCEDURE GET_CHANNELSUB_BY_ID(cid IN CHANNELSUB.ID%TYPE);
PROCEDURE CREAT_NEW_CHANNELSUB (channel_id IN CHANNELSUB.CHANNELID%TYPE,channel_name in CHANNELSUB.CHANNELNAME %type,descrip in CHANNELSUB.DESCRIPTION%type,image_name in CHANNELSUB.IMAGENAME%type, USER_ID IN CHANNELSUB.USERID%TYPE,sub_use in CHANNELSUB.SUBUSERID%TYPE);
PROCEDURE UPDATE_of_CHANNELSUB (cid in CHANNELSUB.ID%TYPE,channel_id IN CHANNELSUB.CHANNELID%TYPE,channel_name in CHANNELSUB.CHANNELNAME %type,descrip in CHANNELSUB.DESCRIPTION%type,image_name in CHANNELSUB.IMAGENAME%type, USER_ID IN CHANNELSUB.USERID%TYPE,sub_use in CHANNELSUB.SUBUSERID%TYPE);
PROCEDURE  DELETE_CHANNELSUB (cid IN CHANNELSUB.ID%TYPE);
PROCEDURE GetNumberOfUsersSubs(startDate IN DATE,endDate IN DATE,userCount OUT NUMBER);
PROCEDURE SubscribeToChannel(p_channel_number IN INT,p_user_id IN INT); 
PROCEDURE GetSubUser;
PROCEDURE GetChannelUser;
PROCEDURE GetNumberSub(p_subuserid IN INT);
PROCEDURE CHECK_SUBSCRIPTION(chid IN INT, subid IN INT);
PROCEDURE deletesubrow(chid int , subid int);
PROCEDURE Cecksub(cid IN INT,subid IN INT);
--PROCEDURE GetNumberUserSyb;
PROCEDURE GetTotalUserSub;
PROCEDURE Get_Number_Of_sub_User(usid in int);
PROCEDURE get_sub_by_subuserid (usid in int );
END CHANNELSUB_Package;

----------------------------------BODY-----------------------------------------
CREATE OR REPLACE PACKAGE BODY CHANNELSUB_Package AS
 
  PROCEDURE GET_ALL IS
    CU_ALL SYS_REFCURSOR;
 
  BEGIN
    OPEN CU_ALL FOR SELECT * FROM CHANNELSUB;
 
    DBMS_SQL.RETURN_RESULT(CU_ALL);
  END GET_ALL;
  -------------------------------------------------------
PROCEDURE GET_CHANNELSUB_BY_ID(cid IN CHANNELSUB.ID%TYPE)IS
    CUR_IT SYS_REFCURSOR;
  BEGIN
    OPEN CUR_IT FOR SELECT * FROM CHANNELSUB WHERE CHANNELSUB.ID = cid;
    DBMS_SQL.RETURN_RESULT(CUR_IT);
  END GET_CHANNELSUB_BY_ID;
   ------------------------------------------------
PROCEDURE CREAT_NEW_CHANNELSUB (channel_id IN CHANNELSUB.CHANNELID%TYPE,channel_name in CHANNELSUB.CHANNELNAME %type,descrip in CHANNELSUB.DESCRIPTION%type,image_name in CHANNELSUB.IMAGENAME%type, USER_ID IN CHANNELSUB.USERID%TYPE,sub_use in CHANNELSUB.SUBUSERID%TYPE)
AS
 
BEGIN
INSERT INTO CHANNELSUB VALUES (DEFAULT ,channel_id,channel_name,descrip,image_name , USER_ID,sub_use);
COMMIT;
END CREAT_NEW_CHANNELSUB;
-----------------------------------------------------
PROCEDURE UPDATE_of_CHANNELSUB (cid in CHANNELSUB.ID%TYPE,channel_id IN CHANNELSUB.CHANNELID%TYPE,channel_name in CHANNELSUB.CHANNELNAME %type,descrip in CHANNELSUB.DESCRIPTION%type,image_name in CHANNELSUB.IMAGENAME%type, USER_ID IN CHANNELSUB.USERID%TYPE,sub_use in CHANNELSUB.SUBUSERID%TYPE)
as
BEGIN
UPDATE CHANNELSUB 
SET CHANNELID = channel_id ,CHANNELNAME = channel_name,DESCRIPTION = descrip,IMAGENAME = image_name ,USERID = USER_ID, SUBUSERID=sub_use
WHERE CHANNELSUB.ID = cid;
COMMIT;
END UPDATE_of_CHANNELSUB;
------------------------------------------------------------
PROCEDURE DELETE_CHANNELSUB(cid IN CHANNELSUB.ID%TYPE)
as
BEGIN
DELETE FROM  CHANNELSUB
WHERE CHANNELSUB.ID = cid;
COMMIT;
END  DELETE_CHANNELSUB;
------------------------------------------------------------- 
PROCEDURE GetNumberOfUsersSubs(startDate IN DATE,endDate IN DATE,userCount OUT NUMBER)
AS
BEGIN
    SELECT COUNT(DISTINCT U.ID) INTO userCount
    FROM USERS U
    JOIN PAYMENT P ON U.ID = P.USERID
    JOIN CHANNELSUB CS ON U.ID = CS.USERID
    JOIN CHANNEL C ON CS.ChannelId = C.ID
    WHERE P.PAYMENTDATE BETWEEN startDate AND endDate;
END GetNumberOfUsersSubs;
----------------------------------------------------------------------------------
    PROCEDURE SubscribeToChannel(p_channel_number IN INT,p_user_id IN INT) 
    AS
   v_channel_id INT;
    v_channel_name VARCHAR2(800);
    v_description VARCHAR2(800);
    v_image_name VARCHAR2(800);
    v_user_id INT;
    v_sub_user_id INT;
    BEGIN
    --Retrieve data from the channel table
    SELECT ID, CHANNELNAME, DESCRIPTION, IMAGENAME, USERID
    INTO v_channel_id, v_channel_name, v_description, v_image_name, v_user_id
    FROM CHANNEL
    WHERE ID = p_channel_number;

    --Retrieve user ID (sub-user ID)
    SELECT ID INTO v_sub_user_id
    FROM USERS
    WHERE ID = p_user_id;

    --Insert data into sub_channel table
    INSERT INTO CHANNELSUB (ID, CHANNELID, CHANNELNAME, DESCRIPTION, IMAGENAME, USERID, SUBUSERID)
    VALUES (default, v_channel_id, v_channel_name, v_description, v_image_name, v_user_id, v_sub_user_id);
    END SubscribeToChannel;

---------------------------------------------------------------------------------
    PROCEDURE GetSubUser
    AS
    cu SYS_REFCURSOR;
    BEGIN
    OPEN cu FOR SELECT CHANNEL.CHANNELNAME,CHANNEL.DESCRIPTION,USERS.FIRSTNAME,USERS.EMAILE,USERS.CITY
    FROM CHANNEL
    INNER JOIN CHANNELSUB
    ON CHANNELSUB.CHANNELID=CHANNEL.ID
    INNER JOIN USERS
    ON CHANNELSUB.SUBUSERID=USERS.ID;
    DBMS_SQL.RETURN_RESULT(cu);
    END GetSubUser;
-----------------------------------------------------------------------------------
    PROCEDURE GetChannelUser
    AS
    cu SYS_REFCURSOR;
    BEGIN
    OPEN cu FOR SELECT CHANNEL.CHANNELNAME,CHANNEL.DESCRIPTION,USERS.FIRSTNAME,USERS.EMAILE,USERS.CITY
    FROM CHANNEL
    INNER JOIN CHANNELSUB
    ON CHANNELSUB.CHANNELID=CHANNEL.ID
    INNER JOIN USERS
    ON CHANNELSUB.USERID=USERS.ID;
    DBMS_SQL.RETURN_RESULT(cu);
    END GetChannelUser;
---------------------------------------------------------------------------------
PROCEDURE GetNumberSub(p_subuserid IN INT)
AS 
  S_all SYS_REFCURSOR;
BEGIN
  OPEN  S_all FOR
    SELECT COUNT(SUBUSERID) FROM CHANNELSUB
    WHERE SUBUSERID=p_subuserid;
  DBMS_SQL.RETURN_RESULT(S_all);
END GetNumberSub;
------------------------------------
PROCEDURE CHECK_SUBSCRIPTION(chid IN INT, subid IN INT) AS
  subscription_count INT;
BEGIN
  SELECT COUNT(*)
  INTO subscription_count
  FROM CHANNELSUB
  WHERE SUBUSERID = subid AND ChannelId = chid;
  IF subscription_count > 0 THEN
    DBMS_OUTPUT.PUT_LINE('true');
  ELSE
    DBMS_OUTPUT.PUT_LINE('false');
  END IF;
END CHECK_SUBSCRIPTION;
----------------------------------------------------
PROCEDURE deletesubrow(chid INT, subid INT) AS
BEGIN
  DELETE FROM CHANNELSUB
  WHERE SUBUSERID = subid AND ChannelId = chid;
  COMMIT;
END deletesubrow;
--------------------------------------------------------------------------
PROCEDURE Cecksub(cid IN INT,subid IN INT)
AS
    CUR_IT SYS_REFCURSOR;
BEGIN 
    OPEN CUR_IT FOR SELECT * FROM CHANNELSUB WHERE CHANNELID=cid AND SUBUSERID=subid;
    DBMS_SQL.RETURN_RESULT(CUR_IT);
END Cecksub;
-----------------------------------------------------------------------------
PROCEDURE GetTotalUserSub AS
  U_all SYS_REFCURSOR;
  result INT;
BEGIN
  OPEN U_all FOR
    SELECT COUNT(*) INTO result FROM CHANNELSUB;
  DBMS_SQL.RETURN_RESULT(U_all);
END GetTotalUserSub;
---------------------------------------------------------------------------------
PROCEDURE Get_Number_Of_sub_User(usid in int)
AS

RC_all SYS_REFCURSOR;

result INT;

BEGIN

OPEN RC_all FOR

SELECT COUNT(*) INTO result FROM CHANNELSUB

where CHANNELSUB.SUBUSERID=usid ;

DBMS_SQL.RETURN_RESULT(RC_all);

END Get_Number_Of_sub_User;
-------------------------------------------------------------------------------
PROCEDURE get_sub_by_subuserid (usid in int )

as

CUR_IT SYS_REFCURSOR;

  BEGIN

    OPEN CUR_IT FOR SELECT * FROM CHANNELSUB WHERE CHANNELSUB.SUBUSERID = usid;

    DBMS_SQL.RETURN_RESULT(CUR_IT);

    end get_sub_by_subuserid;

END CHANNELSUB_Package;

---------------------------------------------------------------------------------
------------------------------------------------------------------------
-----------------------------------packages of features  -------------------
------------------------------------------------------------------------
CREATE OR REPLACE PACKAGE FEATURES_Package AS
PROCEDURE GET_ALL;
PROCEDURE GET_FEATURES_BY_ID(fid IN FEATURES.ID%TYPE);
PROCEDURE CREAT_NEW_FEATURES (TITLES IN FEATURES.TITLE%TYPE,conttent1 IN FEATURES.CON1%TYPE,conttent2 IN FEATURES.CON2%TYPE,conttent3 IN FEATURES.CON3%TYPE ,image in FEATURES.IMAGENAME%type,HOMESID IN FEATURES.HOMEID%TYPE );
PROCEDURE UPDATE_FEATURES (fid IN FEATURES.ID%TYPE,TITLES IN FEATURES.TITLE%TYPE,conttent1 IN FEATURES.CON1%TYPE,conttent2 IN FEATURES.CON2%TYPE,conttent3 IN FEATURES.CON3%TYPE ,image in FEATURES.IMAGENAME%type,HOMESID IN FEATURES.HOMEID%TYPE);
PROCEDURE DELETE_FEATURES (fid IN FEATURES.ID%TYPE);
END FEATURES_Package;
 
------------------------------BODY-------------------------------
CREATE OR REPLACE PACKAGE BODY FEATURES_Package AS
  PROCEDURE GET_ALL IS
    CU_ALL SYS_REFCURSOR;
  BEGIN
    OPEN CU_ALL FOR SELECT * FROM  FEATURES;
    DBMS_SQL.RETURN_RESULT(CU_ALL);
  END GET_ALL;
--  -------------------------------------------------------
PROCEDURE GET_FEATURES_BY_ID(fid IN FEATURES.ID%TYPE)
IS
    CUR_IT SYS_REFCURSOR;
  BEGIN
    OPEN CUR_IT FOR SELECT * FROM  FEATURES WHERE FEATURES.ID = fid;
    DBMS_SQL.RETURN_RESULT(CUR_IT);
  END GET_FEATURES_BY_ID;
   ------------------------------------------------
PROCEDURE CREAT_NEW_FEATURES (TITLES IN FEATURES.TITLE%TYPE,conttent1 IN FEATURES.CON1%TYPE,conttent2 IN FEATURES.CON2%TYPE,conttent3 IN FEATURES.CON3%TYPE ,image in FEATURES.IMAGENAME%type,HOMESID IN FEATURES.HOMEID%TYPE )
AS
BEGIN
INSERT INTO  FEATURES VALUES (DEFAULT ,TITLES,conttent1,conttent2,conttent3,image,HOMESID);
COMMIT;
END CREAT_NEW_FEATURES;
---------------------------------------------------------
PROCEDURE UPDATE_FEATURES (fid IN FEATURES.ID%TYPE,TITLES IN FEATURES.TITLE%TYPE,conttent1 IN FEATURES.CON1%TYPE,conttent2 IN FEATURES.CON2%TYPE,conttent3 IN FEATURES.CON3%TYPE ,image in FEATURES.IMAGENAME%type,HOMESID IN FEATURES.HOMEID%TYPE)
AS 
BEGIN
UPDATE  FEATURES 
SET TITLE = TITLES ,CON1 = conttent1 , CON2 = conttent2,CON3 = conttent3,IMAGENAME=image,HOMEID=HOMESID
WHERE  FEATURES.ID = fid;
COMMIT;
END UPDATE_FEATURES;
------------------------------------------------------------
PROCEDURE DELETE_FEATURES (fid IN FEATURES.ID%TYPE)
AS
BEGIN
DELETE FROM  FEATURES 
WHERE  FEATURES.ID= fid;
COMMIT;
END DELETE_FEATURES;
end FEATURES_Package;


-----------------------ALTER TO TABLE ----------------------------------


--ALTER TABLE CHANNEL ADD BACKIMAGE VARCHAR2(1500 CHAR);

--ALTER TABLE TEAMMEMBERS ADD PHONENUMBER INT;
--ALTER TABLE TEAMMEMBERS ADD LINKEDIN VARCHAR2(2500 CHAR);




--ALTER TABLE CHANNEL MODIFY (IMAGENAME INVISIBLE, USERID INVISIBLE);
--ALTER TABLE CHANNEL MODIFY (IMAGENAME VISIBLE, USERID VISIBLE);
--);




--ALTER TABLE CHANNEL ADD Description VARCHAR2(800 CHAR);


ALTER TABLE COMMENTS
ADD USERID INT;
 
-- Step 2: Add the foreign key constraint
ALTER TABLE COMMENTS
ADD CONSTRAINT FKUSERCOM FOREIGN KEY (USERID) REFERENCES USERS(ID) ON DELETE CASCADE;


ALTER TABLE RESPONS
ADD USERCID INT;
 
-- Step 2: Add the foreign key constraint
ALTER TABLE RESPONS
ADD CONSTRAINT FKRESPON FOREIGN KEY (USERCID) REFERENCES USERS(ID) ON DELETE CASCADE;


ALTER TABLE CONTACT
RENAME COLUMN Title TO Name;

ALTER TABLE CONTACT
RENAME COLUMN Address TO Subject;

ALTER TABLE CONTACT
RENAME COLUMN PhoneNumber TO Content;

ALTER TABLE NOTIFICATION DROP COLUMN REPORTID; 

ALTER TABLE NOTIFICATION ADD  REPORTID INT;




ALTER TABLE NOTIFICATION
ADD CONSTRAINT FKCNOTUF
FOREIGN KEY (REPORTID)
REFERENCES REPORT (ID)
ON DELETE CASCADE;

ALTER TABLE NOTIFICATION
RENAME COLUMN ID TO NID;
